Subject #1E

Implement a C application for managing the files stored on the File System. For this you will need to define the structure 
File with the following attributes: file identifier (char*), file size (unsigned int), read only (true/false), created date 
(char[10] given as YYYY/MM/DD), and file owner (char*).

1. Create a Binary Search Tree to store at least 7 entries for which data is taken from a text file. Insertion should be 
implemented recursively, and the search key should be the file identifier. (2p)

2. Write the function that prints only the files that have the created date greater than a given value specified as a 
parameter. (1p)

3. Write the function that counts the number of files that have read only access. The function should return the value 
in the main function and results should be displayed at the console. (1p)

4. Write the function that determines the average size for all the files in the structure. The value returned should be 
listed on the console in the main function. (1p)

5. Write the function that searches for a specific file identifier given as a parameter. The file size should be increased 
by 100% of the current size for all the files that it processes until it finds the given key. If no key is found, then all 
the files should be updated. The function is called in the main() and the results are displayed at the console. (1.5p)

6. Write the function for saving the files of a specific owner, given as a parameter, in a Heap structure in which the 
priority key is represented by the file size. The new data structure does NOT share data with the Binary Search Tree and 
all the nodes should be displayed (array manipulation) in the main function after complete creation of the structure. (2.5p)

(*) additional (BST):
	- structure traversal (preorder, inorder, postorder)
	- deletion with keeping the total order semantic (leaf node, one descendant, two descendants)
	- calculating the height of a tree
	- concatenating two trees 

(*) additional (AVL Trees): transform in AVL Binary Tree and implement specific methods

(*) additional (Priority Queues/Heap):
	- insert(S, x): insert element x into set S
	- max(S): return element of S with the highest key
	- extract(S): min/max, return element x and remove it from the set
	- changePrio(S, x, k): change the value of x key from the set at k
	- deleting an element
	- heapsort